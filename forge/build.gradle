plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    forge()
}
repositories {
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://modmaven.dev/" }
}
dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentForge(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
    forgeDependencies("dev.felnull:felnull-java-library:${rootProject.felnull_version}")
    shadowCommon("dev.felnull:felnull-java-library:${rootProject.felnull_version}")

    forgeDependencies 'com.madgag:animated-gif-lib:1.4'
    shadowCommon 'com.madgag:animated-gif-lib:1.4'
}
shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'dev.felnull.fnjl', 'dev.felnull.otyacraftengine.libs.dev.felnull.fnjl'
    relocate 'dokata', 'dev.felnull.otyacraftengine.libs.dokata'
    relocate 'com', 'dev.felnull.otyacraftengine.libs.com'
}
processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name

            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }


    repositories {

    }
}
