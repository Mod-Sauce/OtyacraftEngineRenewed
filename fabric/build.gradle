plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}
repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

configurations {
    shadowCommon

    shadowIn
    implementation.extendsFrom(shadowIn)
}

architectury {
    platformSetupLoomIde()
    fabric()
}
minecraft {
    accessWidener = file("src/main/resources/otyacraftengine.accesswidener")
}
dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentFabric(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    shadowIn "dev.felnull:felnull-java-library:${rootProject.felnull_version}"
}
shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'dev.felnull.fnjl', 'dev.felnull.otyacraftengine.libs.dev.felnull.fnjl'
    relocate 'dokata', 'dev.felnull.otyacraftengine.libs.dokata'
}
processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name

            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {

    }
}
